(()=>{"use strict";var t={8758:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.sayGoodbye=n.sayHello=void 0,n.sayHello=function(){console.log("hi")},n.sayGoodbye=function(){console.log("goodbye")}},8650:(t,n,e)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.sayGoodbye=n.sayHello=void 0;var r=e(8758);Object.defineProperty(n,"sayHello",{enumerable:!0,get:function(){return r.sayHello}}),Object.defineProperty(n,"sayGoodbye",{enumerable:!0,get:function(){return r.sayGoodbye}})},5021:(t,n,e)=>{e.r(n),e.d(n,{AsyncContainerModule:()=>nn,BindingScopeEnum:()=>g,BindingTypeEnum:()=>b,Container:()=>$t,ContainerModule:()=>tn,LazyServiceIdentifer:()=>H,METADATA_KEY:()=>Sn,MetadataReader:()=>j,TargetTypeEnum:()=>m,createTaggedDecorator:()=>an,decorate:()=>sn,getServiceIdentifierAsString:()=>O,id:()=>_,inject:()=>pn,injectable:()=>ln,interfaces:()=>wn,multiBindToService:()=>ht,multiInject:()=>gn,named:()=>dn,namedConstraint:()=>Ft,optional:()=>yn,postConstruct:()=>_n,preDestroy:()=>An,tagged:()=>fn,taggedConstraint:()=>qt,targetName:()=>bn,traverseAncerstors:()=>kt,typeConstraint:()=>Wt,unmanaged:()=>vn});var r={};e.r(r),e.d(r,{DESIGN_PARAM_TYPES:()=>h,INJECT_TAG:()=>u,MULTI_INJECT_TAG:()=>s,NAMED_TAG:()=>i,NAME_TAG:()=>o,NON_CUSTOM_TAG_KEYS:()=>v,OPTIONAL_TAG:()=>c,PARAM_TYPES:()=>d,POST_CONSTRUCT:()=>p,PRE_DESTROY:()=>y,TAGGED:()=>l,TAGGED_PROP:()=>f,UNMANAGED_TAG:()=>a});var i="named",o="name",a="unmanaged",c="optional",u="inject",s="multi_inject",l="inversify:tagged",f="inversify:tagged_props",d="inversify:paramtypes",h="design:paramtypes",p="post_construct",y="pre_destroy";var v=[u,s,o,a,i,c],g={Request:"Request",Singleton:"Singleton",Transient:"Transient"},b={ConstantValue:"ConstantValue",Constructor:"Constructor",DynamicValue:"DynamicValue",Factory:"Factory",Function:"Function",Instance:"Instance",Invalid:"Invalid",Provider:"Provider"},m={ClassProperty:"ClassProperty",ConstructorArgument:"ConstructorArgument",Variable:"Variable"},w=0;function _(){return w++}var A=function(){function t(t,n){this.id=_(),this.activated=!1,this.serviceIdentifier=t,this.scope=n,this.type=b.Invalid,this.constraint=function(t){return!0},this.implementationType=null,this.cache=null,this.factory=null,this.provider=null,this.onActivation=null,this.onDeactivation=null,this.dynamicValue=null}return t.prototype.clone=function(){var n=new t(this.serviceIdentifier,this.scope);return n.activated=n.scope===g.Singleton&&this.activated,n.implementationType=this.implementationType,n.dynamicValue=this.dynamicValue,n.scope=this.scope,n.type=this.type,n.factory=this.factory,n.provider=this.provider,n.constraint=this.constraint,n.onActivation=this.onActivation,n.onDeactivation=this.onDeactivation,n.cache=this.cache,n},t}(),S="Metadata key was used more than once in a parameter:",T="NULL argument",I="Key Not Found",D="Ambiguous match found for serviceIdentifier:",C="No matching bindings found for serviceIdentifier:",x="Missing required @injectable annotation in:",E="The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.",M=function(t,n){return"onDeactivation() error in class "+t+": "+n},j=function(){function t(){}return t.prototype.getConstructorMetadata=function(t){return{compilerGeneratedMetadata:Reflect.getMetadata(d,t),userGeneratedMetadata:Reflect.getMetadata(l,t)||{}}},t.prototype.getPropertiesMetadata=function(t){return Reflect.getMetadata(f,t)||[]},t}(),P=0,R=1;function N(t){return t instanceof RangeError||"Maximum call stack size exceeded"===t.message}function O(t){return"function"==typeof t?t.name:"symbol"==typeof t?t.toString():t}function k(t,n,e){var r="",i=e(t,n);return 0!==i.length&&(r="\nRegistered bindings:",i.forEach((function(t){var n="Object";null!==t.implementationType&&(n=W(t.implementationType)),r=r+"\n "+n,t.constraint.metaData&&(r=r+" - "+t.constraint.metaData)}))),r}function q(t,n){return null!==t.parentRequest&&(t.parentRequest.serviceIdentifier===n||q(t.parentRequest,n))}function F(t){t.childRequests.forEach((function(t){if(q(t,t.serviceIdentifier)){var n=function(t){return function t(n,e){void 0===e&&(e=[]);var r=O(n.serviceIdentifier);return e.push(r),null!==n.parentRequest?t(n.parentRequest,e):e}(t).reverse().join(" --\x3e ")}(t);throw new Error("Circular dependency found: "+n)}F(t)}))}function W(t){if(t.name)return t.name;var n=t.toString(),e=n.match(/^function\s*([^\s(]+)/);return e?e[1]:"Anonymous function: "+n}var B=function(){function t(t){this.id=_(),this.container=t}return t.prototype.addPlan=function(t){this.plan=t},t.prototype.setCurrentRequest=function(t){this.currentRequest=t},t}(),V=function(){function t(t,n){this.key=t,this.value=n}return t.prototype.toString=function(){return this.key===i?"named: "+String(this.value).toString()+" ":"tagged: { key:"+this.key.toString()+", value: "+String(this.value)+" }"},t}(),G=function(t,n){this.parentContext=t,this.rootRequest=n},H=function(){function t(t){this._cb=t}return t.prototype.unwrap=function(){return this._cb()},t}(),K=function(){function t(t){this.str=t}return t.prototype.startsWith=function(t){return 0===this.str.indexOf(t)},t.prototype.endsWith=function(t){var n,e=t.split("").reverse().join("");return n=this.str.split("").reverse().join(""),this.startsWith.call({str:n},e)},t.prototype.contains=function(t){return-1!==this.str.indexOf(t)},t.prototype.equals=function(t){return this.str===t},t.prototype.value=function(){return this.str},t}(),Y=function(){function t(t,n,e,r){this.id=_(),this.type=t,this.serviceIdentifier=e;var o="symbol"==typeof n?n.toString().slice(7,-1):n;this.name=new K(o||""),this.identifier=n,this.metadata=new Array;var a=null;"string"==typeof r?a=new V(i,r):r instanceof V&&(a=r),null!==a&&this.metadata.push(a)}return t.prototype.hasTag=function(t){for(var n=0,e=this.metadata;n<e.length;n++){if(e[n].key===t)return!0}return!1},t.prototype.isArray=function(){return this.hasTag(s)},t.prototype.matchesArray=function(t){return this.matchesTag(s)(t)},t.prototype.isNamed=function(){return this.hasTag(i)},t.prototype.isTagged=function(){return this.metadata.some((function(t){return v.every((function(n){return t.key!==n}))}))},t.prototype.isOptional=function(){return this.matchesTag(c)(!0)},t.prototype.getNamedTag=function(){return this.isNamed()?this.metadata.filter((function(t){return t.key===i}))[0]:null},t.prototype.getCustomTags=function(){return this.isTagged()?this.metadata.filter((function(t){return v.every((function(n){return t.key!==n}))})):null},t.prototype.matchesNamedTag=function(t){return this.matchesTag(i)(t)},t.prototype.matchesTag=function(t){var n=this;return function(e){for(var r=0,i=n.metadata;r<i.length;r++){var o=i[r];if(o.key===t&&o.value===e)return!0}return!1}},t}(),L=function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))};function U(t,n,e,r){var i=t.getConstructorMetadata(e),o=i.compilerGeneratedMetadata;if(void 0===o)throw new Error(x+" "+n+".");var a=i.userGeneratedMetadata,c=Object.keys(a),u=0===e.length&&c.length>0,s=c.length>e.length,l=function(t,n,e,r,i){for(var o=[],a=0;a<i;a++){var c=z(a,t,n,e,r);null!==c&&o.push(c)}return o}(r,n,o,a,u||s?c.length:e.length),f=Q(t,e,n);return L(L([],l,!0),f,!0)}function z(t,n,e,r,i){var o=i[t.toString()]||[],a=Z(o),c=!0!==a.unmanaged,u=r[t],s=a.inject||a.multiInject;if((u=s||u)instanceof H&&(u=u.unwrap()),c){if(!n&&(u===Object||u===Function||void 0===u))throw new Error("Missing required @inject or @multiInject annotation in: argument "+t+" in class "+e+".");var l=new Y(m.ConstructorArgument,a.targetName,u);return l.metadata=o,l}return null}function J(t,n,e,r){var i=t||n;if(void 0===i){var o=x+" for property "+String(e)+" in class "+r+".";throw new Error(o)}return i}function Q(t,n,e){for(var r=t.getPropertiesMetadata(n),i=[],o=Object.getOwnPropertySymbols(r),a=0,c=Object.keys(r).concat(o);a<c.length;a++){var u=c[a],s=r[u],l=Z(s),f=l.targetName||u,d=J(l.inject,l.multiInject,u,e),h=new Y(m.ClassProperty,f,d);h.metadata=s,i.push(h)}var p=Object.getPrototypeOf(n.prototype).constructor;if(p!==Object){var y=Q(t,p,e);i=L(L([],i,!0),y,!0)}return i}function X(t,n){var e=Object.getPrototypeOf(n.prototype).constructor;if(e!==Object){var r=U(t,W(e),e,!0),i=r.map((function(t){return t.metadata.filter((function(t){return t.key===a}))})),o=[].concat.apply([],i).length,c=r.length-o;return c>0?c:X(t,e)}return 0}function Z(t){var n={};return t.forEach((function(t){n[t.key.toString()]=t.value})),{inject:n[u],multiInject:n[s],targetName:n[o],unmanaged:n[a]}}var $=function(){function t(t,n,e,r,i){this.id=_(),this.serviceIdentifier=t,this.parentContext=n,this.parentRequest=e,this.target=i,this.childRequests=[],this.bindings=Array.isArray(r)?r:[r],this.requestScope=null===e?new Map:null}return t.prototype.addChildRequest=function(n,e,r){var i=new t(n,this.parentContext,this,e,r);return this.childRequests.push(i),i},t}();function tt(t){return t._bindingDictionary}function nt(t,n,e,r,i){var o=rt(e.container,i.serviceIdentifier),a=[];return o.length===P&&e.container.options.autoBindInjectable&&"function"==typeof i.serviceIdentifier&&t.getConstructorMetadata(i.serviceIdentifier).compilerGeneratedMetadata&&(e.container.bind(i.serviceIdentifier).toSelf(),o=rt(e.container,i.serviceIdentifier)),a=n?o:o.filter((function(t){var n=new $(t.serviceIdentifier,e,r,t,i);return t.constraint(n)})),function(t,n,e,r){switch(n.length){case P:if(e.isOptional())return n;var i=O(t),o=C;throw o+=function(t,n){if(n.isTagged()||n.isNamed()){var e="",r=n.getNamedTag(),i=n.getCustomTags();return null!==r&&(e+=r.toString()+"\n"),null!==i&&i.forEach((function(t){e+=t.toString()+"\n"}))," "+t+"\n "+t+" - "+e}return" "+t}(i,e),o+=k(r,i,rt),new Error(o);case R:return n;default:if(e.isArray())return n;i=O(t),o=D+" "+i;throw o+=k(r,i,rt),new Error(o)}}(i.serviceIdentifier,a,i,e.container),a}function et(t,n,e,r,i,o){var a,c;if(null===i){a=nt(t,n,r,null,o),c=new $(e,r,null,a,o);var u=new G(r,c);r.addPlan(u)}else a=nt(t,n,r,i,o),c=i.addChildRequest(o.serviceIdentifier,a,o);a.forEach((function(n){var e=null;if(o.isArray())e=c.addChildRequest(n.serviceIdentifier,n,o);else{if(n.cache)return;e=c}if(n.type===b.Instance&&null!==n.implementationType){var i=function(t,n){return U(t,W(n),n,!1)}(t,n.implementationType);if(!r.container.options.skipBaseClassChecks){var a=X(t,n.implementationType);if(i.length<a){var u=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return"The number of constructor arguments in the derived class "+t[0]+" must be >= than the number of constructor arguments of its base class."}(W(n.implementationType));throw new Error(u)}}i.forEach((function(n){et(t,!1,n.serviceIdentifier,r,e,n)}))}}))}function rt(t,n){var e=[],r=tt(t);return r.hasKey(n)?e=r.get(n):null!==t.parent&&(e=rt(t.parent,n)),e}function it(t,n,e,r,i,o,a,c){void 0===c&&(c=!1);var l=new B(n),f=function(t,n,e,r,i,o){var a=new V(t?s:u,e),c=new Y(n,r,e,a);if(void 0!==i){var l=new V(i,o);c.metadata.push(l)}return c}(e,r,i,"",o,a);try{return et(t,c,i,l,null,f),l}catch(t){throw N(t)&&F(l.plan.rootRequest),t}}function ot(t){return("object"==typeof t&&null!==t||"function"==typeof t)&&"function"==typeof t.then}function at(t){return!!ot(t)||Array.isArray(t)&&t.some(ot)}var ct,ut=function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function c(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}u((r=r.apply(t,n||[])).next())}))},st=function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},lt=function(t,n,e){t.has(n.id)||t.set(n.id,e)},ft=function(t,n){t.cache=n,t.activated=!0,ot(n)&&dt(t,n)},dt=function(t,n){return ut(void 0,void 0,void 0,(function(){var e,r;return st(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,n];case 1:return e=i.sent(),t.cache=e,[3,3];case 2:throw r=i.sent(),t.cache=null,t.activated=!1,r;case 3:return[2]}}))}))};!function(t){t.DynamicValue="toDynamicValue",t.Factory="toFactory",t.Provider="toProvider"}(ct||(ct={}));var ht=function(t){return function(n){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return e.forEach((function(e){return t.bind(e).toService(n)}))}}},pt=function(){return pt=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},pt.apply(this,arguments)},yt=function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function c(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}u((r=r.apply(t,n||[])).next())}))},vt=function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},gt=function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))};function bt(t,n,e){var r;if(n.length>0){var i=function(t,n){return t.reduce((function(t,e){var r=n(e);return e.target.type===m.ConstructorArgument?t.constructorInjections.push(r):(t.propertyRequests.push(e),t.propertyInjections.push(r)),t.isAsync||(t.isAsync=at(r)),t}),{constructorInjections:[],propertyInjections:[],propertyRequests:[],isAsync:!1})}(n,e),o=pt(pt({},i),{constr:t});r=i.isAsync?function(t){return yt(this,void 0,void 0,(function(){var n,e;return vt(this,(function(r){switch(r.label){case 0:return[4,wt(t.constructorInjections)];case 1:return n=r.sent(),[4,wt(t.propertyInjections)];case 2:return e=r.sent(),[2,mt(pt(pt({},t),{constructorInjections:n,propertyInjections:e}))]}}))}))}(o):mt(o)}else r=new t;return r}function mt(t){var n,e=new((n=t.constr).bind.apply(n,gt([void 0],t.constructorInjections,!1)));return t.propertyRequests.forEach((function(n,r){var i=n.target.identifier,o=t.propertyInjections[r];e[i]=o})),e}function wt(t){return yt(this,void 0,void 0,(function(){var n,e,r,i;return vt(this,(function(o){for(n=[],e=0,r=t;e<r.length;e++)i=r[e],Array.isArray(i)?n.push(Promise.all(i)):n.push(i);return[2,Promise.all(n)]}))}))}function _t(t,n){var e=function(t,n){var e,r;if(Reflect.hasMetadata(p,t)){var i=Reflect.getMetadata(p,t);try{return null===(r=(e=n)[i.value])||void 0===r?void 0:r.call(e)}catch(n){throw new Error((o=t.name,a=n.message,"@postConstruct error in class "+o+": "+a))}}var o,a}(t,n);return ot(e)?e.then((function(){return n})):n}function At(t,n){t.scope!==g.Singleton&&function(t,n){var e="Class cannot be instantiated in "+(t.scope===g.Request?"request":"transient")+" scope.";if("function"==typeof t.onDeactivation)throw new Error(M(n.name,e));if(Reflect.hasMetadata(y,n))throw new Error("@preDestroy error in class "+n.name+": "+e)}(t,n)}var St=function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function c(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}u((r=r.apply(t,n||[])).next())}))},Tt=function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},It=function(t){return function(n){n.parentContext.setCurrentRequest(n);var e=n.bindings,r=n.childRequests,i=n.target&&n.target.isArray(),o=!(n.parentRequest&&n.parentRequest.target&&n.target&&n.parentRequest.target.matchesArray(n.target.serviceIdentifier));if(i&&o)return r.map((function(n){return It(t)(n)}));if(!n.target.isOptional()||0!==e.length){var a=e[0];return Et(t,n,a)}}},Dt=function(t,n){var e=function(t){switch(t.type){case b.Factory:return{factory:t.factory,factoryType:ct.Factory};case b.Provider:return{factory:t.provider,factoryType:ct.Provider};case b.DynamicValue:return{factory:t.dynamicValue,factoryType:ct.DynamicValue};default:throw new Error("Unexpected factory type "+t.type)}}(t);return function(t,n){try{return t()}catch(t){throw N(t)&&(t=n()),t}}((function(){return e.factory.bind(t)(n)}),(function(){return new Error((t=e.factoryType,r=n.currentRequest.serviceIdentifier.toString(),"It looks like there is a circular dependency in one of the '"+t+"' bindings. Please investigate bindings withservice identifier '"+r+"'."));var t,r}))},Ct=function(t,n,e){var r,i=n.childRequests;switch(function(t){var n=null;switch(t.type){case b.ConstantValue:case b.Function:n=t.cache;break;case b.Constructor:case b.Instance:n=t.implementationType;break;case b.DynamicValue:n=t.dynamicValue;break;case b.Provider:n=t.provider;break;case b.Factory:n=t.factory}if(null===n){var e=O(t.serviceIdentifier);throw new Error("Invalid binding type: "+e)}}(e),e.type){case b.ConstantValue:case b.Function:r=e.cache;break;case b.Constructor:r=e.implementationType;break;case b.Instance:r=function(t,n,e,r){At(t,n);var i=bt(n,e,r);return ot(i)?i.then((function(t){return _t(n,t)})):_t(n,i)}(e,e.implementationType,i,It(t));break;default:r=Dt(e,n.parentContext)}return r},xt=function(t,n,e){var r=function(t,n){return n.scope===g.Singleton&&n.activated?n.cache:n.scope===g.Request&&t.has(n.id)?t.get(n.id):null}(t,n);return null!==r||function(t,n,e){n.scope===g.Singleton&&ft(n,e),n.scope===g.Request&&lt(t,n,e)}(t,n,r=e()),r},Et=function(t,n,e){return xt(t,e,(function(){var r=Ct(t,n,e);return r=ot(r)?r.then((function(t){return Mt(n,e,t)})):Mt(n,e,r)}))};function Mt(t,n,e){var r,i=jt(t.parentContext,n,e),o=Ot(t.parentContext.container),a=o.next();do{r=a.value;var c=t.parentContext,u=t.serviceIdentifier,s=Nt(r,u);i=ot(i)?Rt(s,c,i):Pt(s,c,i),a=o.next()}while(!0!==a.done&&!tt(r).hasKey(t.serviceIdentifier));return i}var jt=function(t,n,e){return"function"==typeof n.onActivation?n.onActivation(t,e):e},Pt=function(t,n,e){for(var r=t.next();!r.done;){if(ot(e=r.value(n,e)))return Rt(t,n,e);r=t.next()}return e},Rt=function(t,n,e){return St(void 0,void 0,void 0,(function(){var r,i;return Tt(this,(function(o){switch(o.label){case 0:return[4,e];case 1:r=o.sent(),i=t.next(),o.label=2;case 2:return i.done?[3,4]:[4,i.value(n,r)];case 3:return r=o.sent(),i=t.next(),[3,2];case 4:return[2,r]}}))}))},Nt=function(t,n){var e=t._activations;return e.hasKey(n)?e.get(n).values():[].values()},Ot=function(t){for(var n=[t],e=t.parent;null!==e;)n.push(e),e=e.parent;return{next:function(){var t=n.pop();return void 0!==t?{done:!1,value:t}:{done:!0,value:void 0}}}};var kt=function(t,n){var e=t.parentRequest;return null!==e&&(!!n(e)||kt(e,n))},qt=function(t){return function(n){var e=function(e){return null!==e&&null!==e.target&&e.target.matchesTag(t)(n)};return e.metaData=new V(t,n),e}},Ft=qt(i),Wt=function(t){return function(n){var e=null;if(null!==n){if(e=n.bindings[0],"string"==typeof t)return e.serviceIdentifier===t;var r=n.bindings[0].implementationType;return t===r}return!1}},Bt=function(){function t(t){this._binding=t}return t.prototype.when=function(t){return this._binding.constraint=t,new Vt(this._binding)},t.prototype.whenTargetNamed=function(t){return this._binding.constraint=Ft(t),new Vt(this._binding)},t.prototype.whenTargetIsDefault=function(){return this._binding.constraint=function(t){return null!==t&&(null!==t.target&&!t.target.isNamed()&&!t.target.isTagged())},new Vt(this._binding)},t.prototype.whenTargetTagged=function(t,n){return this._binding.constraint=qt(t)(n),new Vt(this._binding)},t.prototype.whenInjectedInto=function(t){return this._binding.constraint=function(n){return null!==n&&Wt(t)(n.parentRequest)},new Vt(this._binding)},t.prototype.whenParentNamed=function(t){return this._binding.constraint=function(n){return null!==n&&Ft(t)(n.parentRequest)},new Vt(this._binding)},t.prototype.whenParentTagged=function(t,n){return this._binding.constraint=function(e){return null!==e&&qt(t)(n)(e.parentRequest)},new Vt(this._binding)},t.prototype.whenAnyAncestorIs=function(t){return this._binding.constraint=function(n){return null!==n&&kt(n,Wt(t))},new Vt(this._binding)},t.prototype.whenNoAncestorIs=function(t){return this._binding.constraint=function(n){return null!==n&&!kt(n,Wt(t))},new Vt(this._binding)},t.prototype.whenAnyAncestorNamed=function(t){return this._binding.constraint=function(n){return null!==n&&kt(n,Ft(t))},new Vt(this._binding)},t.prototype.whenNoAncestorNamed=function(t){return this._binding.constraint=function(n){return null!==n&&!kt(n,Ft(t))},new Vt(this._binding)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._binding.constraint=function(e){return null!==e&&kt(e,qt(t)(n))},new Vt(this._binding)},t.prototype.whenNoAncestorTagged=function(t,n){return this._binding.constraint=function(e){return null!==e&&!kt(e,qt(t)(n))},new Vt(this._binding)},t.prototype.whenAnyAncestorMatches=function(t){return this._binding.constraint=function(n){return null!==n&&kt(n,t)},new Vt(this._binding)},t.prototype.whenNoAncestorMatches=function(t){return this._binding.constraint=function(n){return null!==n&&!kt(n,t)},new Vt(this._binding)},t}(),Vt=function(){function t(t){this._binding=t}return t.prototype.onActivation=function(t){return this._binding.onActivation=t,new Bt(this._binding)},t.prototype.onDeactivation=function(t){return this._binding.onDeactivation=t,new Bt(this._binding)},t}(),Gt=function(){function t(t){this._binding=t,this._bindingWhenSyntax=new Bt(this._binding),this._bindingOnSyntax=new Vt(this._binding)}return t.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},t.prototype.whenTargetTagged=function(t,n){return this._bindingWhenSyntax.whenTargetTagged(t,n)},t.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,n){return this._bindingWhenSyntax.whenParentTagged(t,n)},t.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,n)},t.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenNoAncestorTagged(t,n)},t.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},t.prototype.onDeactivation=function(t){return this._bindingOnSyntax.onDeactivation(t)},t}(),Ht=function(){function t(t){this._binding=t}return t.prototype.inRequestScope=function(){return this._binding.scope=g.Request,new Gt(this._binding)},t.prototype.inSingletonScope=function(){return this._binding.scope=g.Singleton,new Gt(this._binding)},t.prototype.inTransientScope=function(){return this._binding.scope=g.Transient,new Gt(this._binding)},t}(),Kt=function(){function t(t){this._binding=t,this._bindingWhenSyntax=new Bt(this._binding),this._bindingOnSyntax=new Vt(this._binding),this._bindingInSyntax=new Ht(t)}return t.prototype.inRequestScope=function(){return this._bindingInSyntax.inRequestScope()},t.prototype.inSingletonScope=function(){return this._bindingInSyntax.inSingletonScope()},t.prototype.inTransientScope=function(){return this._bindingInSyntax.inTransientScope()},t.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},t.prototype.whenTargetTagged=function(t,n){return this._bindingWhenSyntax.whenTargetTagged(t,n)},t.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,n){return this._bindingWhenSyntax.whenParentTagged(t,n)},t.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,n)},t.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenNoAncestorTagged(t,n)},t.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},t.prototype.onDeactivation=function(t){return this._bindingOnSyntax.onDeactivation(t)},t}(),Yt=function(){function t(t){this._binding=t}return t.prototype.to=function(t){return this._binding.type=b.Instance,this._binding.implementationType=t,new Kt(this._binding)},t.prototype.toSelf=function(){if("function"!=typeof this._binding.serviceIdentifier)throw new Error("The toSelf function can only be applied when a constructor is used as service identifier");var t=this._binding.serviceIdentifier;return this.to(t)},t.prototype.toConstantValue=function(t){return this._binding.type=b.ConstantValue,this._binding.cache=t,this._binding.dynamicValue=null,this._binding.implementationType=null,this._binding.scope=g.Singleton,new Gt(this._binding)},t.prototype.toDynamicValue=function(t){return this._binding.type=b.DynamicValue,this._binding.cache=null,this._binding.dynamicValue=t,this._binding.implementationType=null,new Kt(this._binding)},t.prototype.toConstructor=function(t){return this._binding.type=b.Constructor,this._binding.implementationType=t,this._binding.scope=g.Singleton,new Gt(this._binding)},t.prototype.toFactory=function(t){return this._binding.type=b.Factory,this._binding.factory=t,this._binding.scope=g.Singleton,new Gt(this._binding)},t.prototype.toFunction=function(t){if("function"!=typeof t)throw new Error("Value provided to function binding must be a function!");var n=this.toConstantValue(t);return this._binding.type=b.Function,this._binding.scope=g.Singleton,n},t.prototype.toAutoFactory=function(t){return this._binding.type=b.Factory,this._binding.factory=function(n){return function(){return n.container.get(t)}},this._binding.scope=g.Singleton,new Gt(this._binding)},t.prototype.toAutoNamedFactory=function(t){return this._binding.type=b.Factory,this._binding.factory=function(n){return function(e){return n.container.getNamed(t,e)}},new Gt(this._binding)},t.prototype.toProvider=function(t){return this._binding.type=b.Provider,this._binding.provider=t,this._binding.scope=g.Singleton,new Gt(this._binding)},t.prototype.toService=function(t){this.toDynamicValue((function(n){return n.container.get(t)}))},t}(),Lt=function(){function t(){}return t.of=function(n,e,r,i,o){var a=new t;return a.bindings=n,a.middleware=e,a.deactivations=i,a.activations=r,a.moduleActivationStore=o,a},t}();var Ut=function(){function t(){this._map=new Map}return t.prototype.getMap=function(){return this._map},t.prototype.add=function(t,n){if(null==t)throw new Error(T);if(null==n)throw new Error(T);var e=this._map.get(t);void 0!==e?e.push(n):this._map.set(t,[n])},t.prototype.get=function(t){if(null==t)throw new Error(T);var n=this._map.get(t);if(void 0!==n)return n;throw new Error(I)},t.prototype.remove=function(t){if(null==t)throw new Error(T);if(!this._map.delete(t))throw new Error(I)},t.prototype.removeIntersection=function(t){var n=this;this.traverse((function(e,r){var i=t.hasKey(e)?t.get(e):void 0;if(void 0!==i){var o=r.filter((function(t){return!i.some((function(n){return t===n}))}));n._setValue(e,o)}}))},t.prototype.removeByCondition=function(t){var n=this,e=[];return this._map.forEach((function(r,i){for(var o=[],a=0,c=r;a<c.length;a++){var u=c[a];t(u)?e.push(u):o.push(u)}n._setValue(i,o)})),e},t.prototype.hasKey=function(t){if(null==t)throw new Error(T);return this._map.has(t)},t.prototype.clone=function(){var n=new t;return this._map.forEach((function(t,e){t.forEach((function(t){return n.add(e,"object"==typeof(r=t)&&null!==r&&"clone"in r&&"function"==typeof r.clone?t.clone():t);var r}))})),n},t.prototype.traverse=function(t){this._map.forEach((function(n,e){t(e,n)}))},t.prototype._setValue=function(t,n){n.length>0?this._map.set(t,n):this._map.delete(t)},t}(),zt=function(){function t(){this._map=new Map}return t.prototype.remove=function(t){if(this._map.has(t)){var n=this._map.get(t);return this._map.delete(t),n}return this._getEmptyHandlersStore()},t.prototype.addDeactivation=function(t,n,e){this._getModuleActivationHandlers(t).onDeactivations.add(n,e)},t.prototype.addActivation=function(t,n,e){this._getModuleActivationHandlers(t).onActivations.add(n,e)},t.prototype.clone=function(){var n=new t;return this._map.forEach((function(t,e){n._map.set(e,{onActivations:t.onActivations.clone(),onDeactivations:t.onDeactivations.clone()})})),n},t.prototype._getModuleActivationHandlers=function(t){var n=this._map.get(t);return void 0===n&&(n=this._getEmptyHandlersStore(),this._map.set(t,n)),n},t.prototype._getEmptyHandlersStore=function(){return{onActivations:new Ut,onDeactivations:new Ut}},t}(),Jt=function(){return Jt=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},Jt.apply(this,arguments)},Qt=function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function c(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}u((r=r.apply(t,n||[])).next())}))},Xt=function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},Zt=function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))},$t=function(){function t(t){var n=t||{};if("object"!=typeof n)throw new Error("Invalid Container constructor argument. Container options must be an object.");if(void 0===n.defaultScope)n.defaultScope=g.Transient;else if(n.defaultScope!==g.Singleton&&n.defaultScope!==g.Transient&&n.defaultScope!==g.Request)throw new Error("Invalid Container option. Default scope must be a string ('singleton' or 'transient').");if(void 0===n.autoBindInjectable)n.autoBindInjectable=!1;else if("boolean"!=typeof n.autoBindInjectable)throw new Error("Invalid Container option. Auto bind injectable must be a boolean");if(void 0===n.skipBaseClassChecks)n.skipBaseClassChecks=!1;else if("boolean"!=typeof n.skipBaseClassChecks)throw new Error("Invalid Container option. Skip base check must be a boolean");this.options={autoBindInjectable:n.autoBindInjectable,defaultScope:n.defaultScope,skipBaseClassChecks:n.skipBaseClassChecks},this.id=_(),this._bindingDictionary=new Ut,this._snapshots=[],this._middleware=null,this._activations=new Ut,this._deactivations=new Ut,this.parent=null,this._metadataReader=new j,this._moduleActivationStore=new zt}return t.merge=function(n,e){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var o=new t,a=Zt([n,e],r,!0).map((function(t){return tt(t)})),c=tt(o);function u(t,n){t.traverse((function(t,e){e.forEach((function(t){n.add(t.serviceIdentifier,t.clone())}))}))}return a.forEach((function(t){u(t,c)})),o},t.prototype.load=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var e=this._getContainerModuleHelpersFactory(),r=0,i=t;r<i.length;r++){var o=i[r],a=e(o.id);o.registry(a.bindFunction,a.unbindFunction,a.isboundFunction,a.rebindFunction,a.unbindAsyncFunction,a.onActivationFunction,a.onDeactivationFunction)}},t.prototype.loadAsync=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Qt(this,void 0,void 0,(function(){var n,e,r,i,o;return Xt(this,(function(a){switch(a.label){case 0:n=this._getContainerModuleHelpersFactory(),e=0,r=t,a.label=1;case 1:return e<r.length?(i=r[e],o=n(i.id),[4,i.registry(o.bindFunction,o.unbindFunction,o.isboundFunction,o.rebindFunction,o.unbindAsyncFunction,o.onActivationFunction,o.onDeactivationFunction)]):[3,4];case 2:a.sent(),a.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t.prototype.unload=function(){for(var t=this,n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];n.forEach((function(n){var e=t._removeModuleBindings(n.id);t._deactivateSingletons(e),t._removeModuleHandlers(n.id)}))},t.prototype.unloadAsync=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Qt(this,void 0,void 0,(function(){var n,e,r,i;return Xt(this,(function(o){switch(o.label){case 0:n=0,e=t,o.label=1;case 1:return n<e.length?(r=e[n],i=this._removeModuleBindings(r.id),[4,this._deactivateSingletonsAsync(i)]):[3,4];case 2:o.sent(),this._removeModuleHandlers(r.id),o.label=3;case 3:return n++,[3,1];case 4:return[2]}}))}))},t.prototype.bind=function(t){var n=this.options.defaultScope||g.Transient,e=new A(t,n);return this._bindingDictionary.add(t,e),new Yt(e)},t.prototype.rebind=function(t){return this.unbind(t),this.bind(t)},t.prototype.rebindAsync=function(t){return Qt(this,void 0,void 0,(function(){return Xt(this,(function(n){switch(n.label){case 0:return[4,this.unbindAsync(t)];case 1:return n.sent(),[2,this.bind(t)]}}))}))},t.prototype.unbind=function(t){if(this._bindingDictionary.hasKey(t)){var n=this._bindingDictionary.get(t);this._deactivateSingletons(n)}this._removeServiceFromDictionary(t)},t.prototype.unbindAsync=function(t){return Qt(this,void 0,void 0,(function(){var n;return Xt(this,(function(e){switch(e.label){case 0:return this._bindingDictionary.hasKey(t)?(n=this._bindingDictionary.get(t),[4,this._deactivateSingletonsAsync(n)]):[3,2];case 1:e.sent(),e.label=2;case 2:return this._removeServiceFromDictionary(t),[2]}}))}))},t.prototype.unbindAll=function(){var t=this;this._bindingDictionary.traverse((function(n,e){t._deactivateSingletons(e)})),this._bindingDictionary=new Ut},t.prototype.unbindAllAsync=function(){return Qt(this,void 0,void 0,(function(){var t,n=this;return Xt(this,(function(e){switch(e.label){case 0:return t=[],this._bindingDictionary.traverse((function(e,r){t.push(n._deactivateSingletonsAsync(r))})),[4,Promise.all(t)];case 1:return e.sent(),this._bindingDictionary=new Ut,[2]}}))}))},t.prototype.onActivation=function(t,n){this._activations.add(t,n)},t.prototype.onDeactivation=function(t,n){this._deactivations.add(t,n)},t.prototype.isBound=function(t){var n=this._bindingDictionary.hasKey(t);return!n&&this.parent&&(n=this.parent.isBound(t)),n},t.prototype.isCurrentBound=function(t){return this._bindingDictionary.hasKey(t)},t.prototype.isBoundNamed=function(t,n){return this.isBoundTagged(t,i,n)},t.prototype.isBoundTagged=function(t,n,e){var r=!1;if(this._bindingDictionary.hasKey(t)){var i=this._bindingDictionary.get(t),o=function(t,n,e,r){var i=new Y(m.Variable,"",n,new V(e,r)),o=new B(t);return new $(n,o,null,[],i)}(this,t,n,e);r=i.some((function(t){return t.constraint(o)}))}return!r&&this.parent&&(r=this.parent.isBoundTagged(t,n,e)),r},t.prototype.snapshot=function(){this._snapshots.push(Lt.of(this._bindingDictionary.clone(),this._middleware,this._activations.clone(),this._deactivations.clone(),this._moduleActivationStore.clone()))},t.prototype.restore=function(){var t=this._snapshots.pop();if(void 0===t)throw new Error("No snapshot available to restore.");this._bindingDictionary=t.bindings,this._activations=t.activations,this._deactivations=t.deactivations,this._middleware=t.middleware,this._moduleActivationStore=t.moduleActivationStore},t.prototype.createChild=function(n){var e=new t(n||this.options);return e.parent=this,e},t.prototype.applyMiddleware=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=this._middleware?this._middleware:this._planAndResolve();this._middleware=t.reduce((function(t,n){return n(t)}),e)},t.prototype.applyCustomMetadataReader=function(t){this._metadataReader=t},t.prototype.get=function(t){var n=this._getNotAllArgs(t,!1);return this._getButThrowIfAsync(n)},t.prototype.getAsync=function(t){return Qt(this,void 0,void 0,(function(){var n;return Xt(this,(function(e){return n=this._getNotAllArgs(t,!1),[2,this._get(n)]}))}))},t.prototype.getTagged=function(t,n,e){var r=this._getNotAllArgs(t,!1,n,e);return this._getButThrowIfAsync(r)},t.prototype.getTaggedAsync=function(t,n,e){return Qt(this,void 0,void 0,(function(){var r;return Xt(this,(function(i){return r=this._getNotAllArgs(t,!1,n,e),[2,this._get(r)]}))}))},t.prototype.getNamed=function(t,n){return this.getTagged(t,i,n)},t.prototype.getNamedAsync=function(t,n){return this.getTaggedAsync(t,i,n)},t.prototype.getAll=function(t){var n=this._getAllArgs(t);return this._getButThrowIfAsync(n)},t.prototype.getAllAsync=function(t){var n=this._getAllArgs(t);return this._getAll(n)},t.prototype.getAllTagged=function(t,n,e){var r=this._getNotAllArgs(t,!0,n,e);return this._getButThrowIfAsync(r)},t.prototype.getAllTaggedAsync=function(t,n,e){var r=this._getNotAllArgs(t,!0,n,e);return this._getAll(r)},t.prototype.getAllNamed=function(t,n){return this.getAllTagged(t,i,n)},t.prototype.getAllNamedAsync=function(t,n){return this.getAllTaggedAsync(t,i,n)},t.prototype.resolve=function(t){var n=this.isBound(t);n||this.bind(t).toSelf();var e=this.get(t);return n||this.unbind(t),e},t.prototype._preDestroy=function(t,n){if(Reflect.hasMetadata(y,t))return n[Reflect.getMetadata(y,t).value]()},t.prototype._removeModuleHandlers=function(t){var n=this._moduleActivationStore.remove(t);this._activations.removeIntersection(n.onActivations),this._deactivations.removeIntersection(n.onDeactivations)},t.prototype._removeModuleBindings=function(t){return this._bindingDictionary.removeByCondition((function(n){return n.moduleId===t}))},t.prototype._deactivate=function(t,n){var e=this,r=Object.getPrototypeOf(n).constructor;try{if(this._deactivations.hasKey(t.serviceIdentifier)){var i=this._deactivateContainer(n,this._deactivations.get(t.serviceIdentifier).values());if(ot(i))return this._handleDeactivationError(i.then((function(){return e._propagateContainerDeactivationThenBindingAndPreDestroyAsync(t,n,r)})),r)}var o=this._propagateContainerDeactivationThenBindingAndPreDestroy(t,n,r);if(ot(o))return this._handleDeactivationError(o,r)}catch(t){throw new Error(M(r.name,t.message))}},t.prototype._handleDeactivationError=function(t,n){return Qt(this,void 0,void 0,(function(){var e;return Xt(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,t];case 1:return r.sent(),[3,3];case 2:throw e=r.sent(),new Error(M(n.name,e.message));case 3:return[2]}}))}))},t.prototype._deactivateContainer=function(t,n){for(var e=this,r=n.next();r.value;){var i=r.value(t);if(ot(i))return i.then((function(){return e._deactivateContainerAsync(t,n)}));r=n.next()}},t.prototype._deactivateContainerAsync=function(t,n){return Qt(this,void 0,void 0,(function(){var e;return Xt(this,(function(r){switch(r.label){case 0:e=n.next(),r.label=1;case 1:return e.value?[4,e.value(t)]:[3,3];case 2:return r.sent(),e=n.next(),[3,1];case 3:return[2]}}))}))},t.prototype._getContainerModuleHelpersFactory=function(){var t=this,n=function(t,n){t._binding.moduleId=n},e=function(e){return function(r){var i=t.rebind(r);return n(i,e),i}},r=function(n){return function(e,r){t._moduleActivationStore.addActivation(n,e,r),t.onActivation(e,r)}},i=function(n){return function(e,r){t._moduleActivationStore.addDeactivation(n,e,r),t.onDeactivation(e,r)}};return function(o){return{bindFunction:(a=o,function(e){var r=t.bind(e);return n(r,a),r}),isboundFunction:function(n){return t.isBound(n)},onActivationFunction:r(o),onDeactivationFunction:i(o),rebindFunction:e(o),unbindFunction:function(n){return t.unbind(n)},unbindAsyncFunction:function(n){return t.unbindAsync(n)}};var a}},t.prototype._getAll=function(t){return Promise.all(this._get(t))},t.prototype._get=function(t){var n=Jt(Jt({},t),{contextInterceptor:function(t){return t},targetType:m.Variable});if(this._middleware){var e=this._middleware(n);if(null==e)throw new Error("Invalid return type in middleware. Middleware must return!");return e}return this._planAndResolve()(n)},t.prototype._getButThrowIfAsync=function(t){var n=this._get(t);if(at(n))throw new Error("You are attempting to construct '"+t.serviceIdentifier+"' in a synchronous way\n but it has asynchronous dependencies.");return n},t.prototype._getAllArgs=function(t){return{avoidConstraints:!0,isMultiInject:!0,serviceIdentifier:t}},t.prototype._getNotAllArgs=function(t,n,e,r){return{avoidConstraints:!1,isMultiInject:n,serviceIdentifier:t,key:e,value:r}},t.prototype._planAndResolve=function(){var t=this;return function(n){var e=it(t._metadataReader,t,n.isMultiInject,n.targetType,n.serviceIdentifier,n.key,n.value,n.avoidConstraints);return function(t){return It(t.plan.rootRequest.requestScope)(t.plan.rootRequest)}(e=n.contextInterceptor(e))}},t.prototype._deactivateIfSingleton=function(t){var n=this;if(t.activated)return ot(t.cache)?t.cache.then((function(e){return n._deactivate(t,e)})):this._deactivate(t,t.cache)},t.prototype._deactivateSingletons=function(t){for(var n=0,e=t;n<e.length;n++){var r=e[n];if(ot(this._deactivateIfSingleton(r)))throw new Error("Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)")}},t.prototype._deactivateSingletonsAsync=function(t){return Qt(this,void 0,void 0,(function(){var n=this;return Xt(this,(function(e){switch(e.label){case 0:return[4,Promise.all(t.map((function(t){return n._deactivateIfSingleton(t)})))];case 1:return e.sent(),[2]}}))}))},t.prototype._propagateContainerDeactivationThenBindingAndPreDestroy=function(t,n,e){return this.parent?this._deactivate.bind(this.parent)(t,n):this._bindingDeactivationAndPreDestroy(t,n,e)},t.prototype._propagateContainerDeactivationThenBindingAndPreDestroyAsync=function(t,n,e){return Qt(this,void 0,void 0,(function(){return Xt(this,(function(r){switch(r.label){case 0:return this.parent?[4,this._deactivate.bind(this.parent)(t,n)]:[3,2];case 1:return r.sent(),[3,4];case 2:return[4,this._bindingDeactivationAndPreDestroyAsync(t,n,e)];case 3:r.sent(),r.label=4;case 4:return[2]}}))}))},t.prototype._removeServiceFromDictionary=function(t){try{this._bindingDictionary.remove(t)}catch(n){throw new Error("Could not unbind serviceIdentifier: "+O(t))}},t.prototype._bindingDeactivationAndPreDestroy=function(t,n,e){var r=this;if("function"==typeof t.onDeactivation){var i=t.onDeactivation(n);if(ot(i))return i.then((function(){return r._preDestroy(e,n)}))}return this._preDestroy(e,n)},t.prototype._bindingDeactivationAndPreDestroyAsync=function(t,n,e){return Qt(this,void 0,void 0,(function(){return Xt(this,(function(r){switch(r.label){case 0:return"function"!=typeof t.onDeactivation?[3,2]:[4,t.onDeactivation(n)];case 1:r.sent(),r.label=2;case 2:return[4,this._preDestroy(e,n)];case 3:return r.sent(),[2]}}))}))},t}(),tn=function(t){this.id=_(),this.registry=t},nn=function(t){this.id=_(),this.registry=t};function en(t,n,e,r){!function(t){if(void 0!==t)throw new Error(E)}(n),on(l,t,e.toString(),r)}function rn(t){var n=[];if(Array.isArray(t)){var e=function(t){for(var n=new Set,e=0,r=t;e<r.length;e++){var i=r[e];if(n.has(i))return i;n.add(i)}}((n=t).map((function(t){return t.key})));if(void 0!==e)throw new Error(S+" "+e.toString())}else n=[t];return n}function on(t,n,e,r){var i=rn(r),o={};Reflect.hasOwnMetadata(t,n)&&(o=Reflect.getMetadata(t,n));var a=o[e];if(void 0===a)a=[];else for(var c=function(t){if(i.some((function(n){return n.key===t.key})))throw new Error(S+" "+t.key.toString())},u=0,s=a;u<s.length;u++){c(s[u])}a.push.apply(a,i),o[e]=a,Reflect.defineMetadata(t,o,n)}function an(t){return function(n,e,r){"number"==typeof r?en(n,e,r,t):function(t,n,e){if(void 0!==t.prototype)throw new Error(E);on(f,t.constructor,n,e)}(n,e,t)}}function cn(t,n){Reflect.decorate(t,n)}function un(t,n){return function(e,r){n(e,r,t)}}function sn(t,n,e){"number"==typeof e?cn([un(e,t)],n):"string"==typeof e?Reflect.decorate([t],n,e):cn([t],n)}function ln(){return function(t){if(Reflect.hasOwnMetadata(d,t))throw new Error("Cannot apply @injectable decorator multiple times.");var n=Reflect.getMetadata(h,t)||[];return Reflect.defineMetadata(d,n,t),t}}function fn(t,n){return an(new V(t,n))}function dn(t){return an(new V(i,t))}function hn(t){return function(n){return function(e,r,i){if(void 0===n){var o="function"==typeof e?e.name:e.constructor.name;throw new Error("@inject called with undefined this could mean that the class "+o+" has a circular dependency problem. You can use a LazyServiceIdentifer to  overcome this limitation.")}return an(new V(t,n))(e,r,i)}}}var pn=hn(u);function yn(){return an(new V(c,!0))}function vn(){return function(t,n,e){en(t,n,e,new V(a,!0))}}var gn=hn(s);function bn(t){return function(n,e,r){en(n,e,r,new V(o,t))}}function mn(t,n){return function(){return function(e,r){var i=new V(t,r);if(Reflect.hasOwnMetadata(t,e.constructor))throw new Error(n);Reflect.defineMetadata(t,i,e.constructor)}}}var wn,_n=mn(p,"Cannot apply @postConstruct decorator multiple times in the same class"),An=mn(y,"Cannot apply @preDestroy decorator multiple times in the same class");wn||(wn={});var Sn=r},8338:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractAsyncRequest=void 0;n.AbstractAsyncRequest=class{request(t){}}},3821:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractCommand=void 0;n.AbstractCommand=class{run(){console.log("this is abstract implementation of ICommand, please make sure to override")}}},7631:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractModule=void 0;n.AbstractModule=class{constructor(){this.name="Abstract"}startModule(){console.log("this is abstract implementation of IInjectableExtensionModule, please make sure to override")}}},3873:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractSoundService=void 0;n.AbstractSoundService=class{loadSound(t){console.log("this is abstract implementation of ISoundService, please make sure to override")}}},9340:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.TYPES=void 0,n.TYPES={FetchConfig:Symbol.for("FetchConfig"),Command:Symbol.for("Command"),LoadModule:Symbol.for("LoadModule"),InjectionTest:Symbol.for("InjectionTest")}},8046:(t,n,e)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.TYPES=n.AbstractAsyncRequest=n.AbstractCommand=n.AbstractSoundService=n.AbstractModule=void 0;var r=e(7631);Object.defineProperty(n,"AbstractModule",{enumerable:!0,get:function(){return r.AbstractModule}});var i=e(3873);Object.defineProperty(n,"AbstractSoundService",{enumerable:!0,get:function(){return i.AbstractSoundService}});var o=e(3821);Object.defineProperty(n,"AbstractCommand",{enumerable:!0,get:function(){return o.AbstractCommand}});var a=e(8338);Object.defineProperty(n,"AbstractAsyncRequest",{enumerable:!0,get:function(){return a.AbstractAsyncRequest}});var c=e(9340);Object.defineProperty(n,"TYPES",{enumerable:!0,get:function(){return c.TYPES}})},4777:function(t,n,e){var r=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,a=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,n,e,r);else for(var c=t.length-1;c>=0;c--)(i=t[c])&&(a=(o<3?i(a):o>3?i(n,e,a):i(n,e))||a);return o>3&&a&&Object.defineProperty(n,e,a),a};Object.defineProperty(n,"__esModule",{value:!0}),n.HelloWorldExtension=n.default=void 0;const i=e(5021),o=e(8046),a=e(8650);let c=class extends o.AbstractModule{constructor(){super(...arguments),this.name="HelloWorldExtension"}startModule(){(0,a.sayHello)()}};c=r([(0,i.injectable)()],c),n.default=c,n.HelloWorldExtension=c;let u=window.kitsuneExtensionFactories;null==u&&(u=new Map,window.kitsuneExtensionFactories=u),u.set("HelloWorldExtension",c)}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={exports:{}};return t[r].call(o.exports,o,o.exports,e),o.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(4777);e(8650)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,